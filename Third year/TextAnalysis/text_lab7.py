# -*- coding: utf-8 -*-
"""text_lab7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tiZqD3D0b7s-cO5ZkqcS8Vy43ga4ZKUm

Створити кілька своїх прикладів у форматі json за тематикою варіанту
(англійською або українською мовою) для розпізнавання нового типу
сутностей (обрати самостійно). Створити програму, що додає ці
приклади до існуючої моделі spaCy, навчає модель. Продемонструвати
роботу.
"""

import spacy
nlp = spacy.load("en_core_web_sm")

"""Для початку візьмемо сутності з речень та виведемо їх."""

text = [
    'The Academy of Country Music (ACM) honored outstanding performers and songwriters who have significantly contributed to the evolution of country music.'
    'The Jazz Foundation of America celebrated the career of iconic saxophonist Wayne Shorter with a Lifetime Achievement Award, recognizing his impact on the jazz world.'
    'The Montreux Jazz Festival in Switzerland drew musicians from various genres to engage in workshops, jam sessions, and international competitions.'
    'The Boston Symphony Orchestra, led by maestro Andris Nelsons, presented an innovative concert series that blended classical symphonies with contemporary dance performances.'
]
for sent in text:
    doc = nlp(sent)
    for ent in doc.ents:
        print(ent.text, ent.label_)

"""Навчимо модель."""

import random
from spacy.training import Example

nlp = spacy.blank("en")
ruler = nlp.add_pipe("entity_ruler")
patterns = [
    {"label": "ORG", "pattern": "ACM"},
    {"label": "GPE", "pattern": "Switzerland"},
    {"label": "PERSON", "pattern": "Andris Nelsons"},
    {"label": "PERSON", "pattern": "Wayne Shorter"},
]

ruler.add_patterns(patterns)

"""
Продемонструємо роботу."""

for sentence in text:
    doc = nlp(sentence)
    for ent in doc.ents:
        print(ent.text, ent.label_)

"""Завдання друге"""

import spacy
from spacy.training import Example

# Приклади даних для навчання
train_data = [
    ("I want to order two tickets for tomorrow's concert.", "ticket_order"),
    ("Can you provide me with more information about this event?", "event_info"),
    ("No, I'm not interested. Thanks anyway.", "not_interested"),
    ("Yes, that sounds good. Please proceed with the booking.", "proceed_booking"),
    ("Thank you for your help. Goodbye!", "thanks_goodbye"),
]

# Ініціалізація моделі spaCy
nlp = spacy.blank("en")
textcat = nlp.add_pipe("textcat")
textcat.add_label("ticket_order")
textcat.add_label("event_info")
textcat.add_label("proceed_booking")
textcat.add_label("thanks_goodbye")
textcat.add_label("not_interested")

# Навчання моделі
optimizer = nlp.begin_training()
for i in range(20):
    losses = {}
    for text, label in train_data:
        doc = nlp.make_doc(text)
        example = Example.from_dict(doc, {"cats": {label: 1.0}})
        nlp.update([example], sgd=optimizer, losses=losses)
    print(f"Epoch {i+1}, Loss: {losses}")

# Демонстрація роботи моделі на прикладах
test_data = [
    "I would like to order two tickets for tomorrow's concert.",
    "Can you provide me with more information about this event?",
    "No, I'm not interested. Thanks anyway.",
    "Yes, that sounds good. Please proceed with the booking.",
    "Thank you for your help. Goodbye!",
]

for text in test_data:
    doc = nlp(text)
    intent = max(doc.cats, key=doc.cats.get)
    print(f"Utterance: '{text}'\nPredicted intent: {intent}\n")