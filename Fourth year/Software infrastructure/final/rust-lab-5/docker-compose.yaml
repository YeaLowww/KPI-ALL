version: '3.8'
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend/static:/app/static
      - frontend-cache:/usr/src/app/server/target
      - cargo-cache:/usr/local/cargo/registry
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - backend-cache:/usr/src/app/server/target
      - cargo-cache:/usr/local/cargo/registry
      - ${IMAGES_EXTERNAL_PATH}:${IMAGES_PATH}
    depends_on:
      - mongo
      - postgresql
    networks:
      - app-network

  mongo:
    build: 
      context: ./databases/mongo
    env_file:
      - .env
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db
    ports:
      - "${MONGO_EXTERNAL_PORT}:${MONGO_PORT}"
      
  postgresql:
    image: postgres:15
    env_file:
      - .env
    networks:
      - app-network
    volumes:
      - ./databases/postgresql/setup.sql:/docker-entrypoint-initdb.d/setup.sql
      - postgresql_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}"

volumes:
  mongo_data:
  postgresql_data:
  frontend-cache:
  backend-cache:
  cargo-cache:
networks:
  app-network:
    driver: bridge